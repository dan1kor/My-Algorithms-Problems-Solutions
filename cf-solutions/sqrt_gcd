def gcd(a: int, b: int) -> int:
    if b == 0:
        return a
    return gcd(b, a % b)


def main():
    n = int(input())
    *arr, = map(int, input().split())
    t = int(input())
    res = []

    block_size = int(n ** (1 / 2)) + 1
    blocks = [0 for _ in range(n // block_size + 1)]
    blocks[0] = arr[0]
    for i in range(1, n):
        blocks[i // block_size] = gcd(blocks[i // block_size], arr[i])

    def sqrt_gcd(l: int, r: int) -> int:
        ans = arr[l]
        while l <= r:
            if l // block_size != r // block_size and l % block_size == 0:
                ans = gcd(ans, blocks[l // block_size])
                l += block_size
            else:
                ans = gcd(ans, arr[l])
                l += 1
        return ans

    def edit_sqrt(ind: int):
        block = ind // block_size
        end = block * block_size + block_size
        if end > len(arr):
            end = 0

        blocks[block] = arr[ind]
        for i in range(block_size * block, end):
            blocks[block] = gcd(blocks[block], arr[i])

    for i in range(t):
        req = input().split()
        command, l, r = req[0], int(req[1]), int(req[2])
        if command == 's':
            res.append(sqrt_gcd(l - 1, r - 1))
        else:
            arr[l - 1] = r
            edit_sqrt(l - 1)

    print(' '.join(map(str, res)))


main()
